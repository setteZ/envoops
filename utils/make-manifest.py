"""
generated by https://claude.ai
'hey, make a python script that from a list of files into an array,
create a manifest file containing the name of the file and its sha,
one file per line'
"""
import os
import hashlib
import sys
from pathlib import Path

def calculate_sha256(file_path):
    """Calculate the SHA-256 hash of a file."""
    sha256_hash = hashlib.sha256()
    
    try:
        with open(file_path, "rb") as f:
            # Read the file in chunks to handle large files efficiently
            for byte_block in iter(lambda: f.read(4096), b""):
                sha256_hash.update(byte_block)
        return sha256_hash.hexdigest()
    except Exception as e:
        print(f"Error processing {file_path}: {e}", file=sys.stderr)
        return None

def create_manifest(file_list, output_file="manifest.txt"):
    """Create a manifest file with filename and SHA-256 hash, one file per line."""
    successful = 0
    failed = 0
    
    with open(output_file, "w") as manifest:
        for file_path in file_list:
            path = Path(file_path)
            
            if not path.exists():
                print(f"Warning: File not found - {file_path}", file=sys.stderr)
                failed += 1
                continue
                
            if not path.is_file():
                print(f"Warning: Not a file - {file_path}", file=sys.stderr)
                failed += 1
                continue
            
            file_hash = calculate_sha256(file_path)
            
            if file_hash:
                manifest.write(f"{file_path},{file_hash}\n")
                successful += 1
            else:
                failed += 1
    
    print(f"Manifest created at {output_file}")
    print(f"Files processed: {successful} successful, {failed} failed")
    
    return output_file

if __name__ == "__main__":
    # Check if files were provided as arguments
    if len(sys.argv) < 2:
        print("Usage: python script.py file1 [file2 ...] [--output manifest_file.txt]")
        sys.exit(1)
    
    # Check if output file is specified
    output_file = "manifest.txt"
    files = []
    
    for arg in sys.argv[1:]:
        if arg.startswith("--output="):
            output_file = arg.split("=")[1]
        elif arg == "--output" and len(sys.argv) > sys.argv.index(arg) + 1:
            output_index = sys.argv.index(arg)
            output_file = sys.argv[output_index + 1]
        else:
            if arg != output_file and not arg == "--output":
                files.append(arg)
    
    create_manifest(files, output_file)